raw <- readRDS('AllCells.rds')
setwd("~/Dropbox/Safe/Research/Zero/310418/cell")
raw <- readRDS('AllCells.rds')
rexprs <- raw$exprs
colnames(rexprs) <- raw$fdata$shortName
row.names(raw$fdata) <- raw$fdata$primerid <- raw$fdata$shortname
fl <- FromMatrix("FluidigmAssay", exprsArray = t(rexprs), cData = raw$cdata, fData = raw$fdata)
frq1 <- freq(subset(fl, ncells==1))
fl <<- fl[frq1>freq,]
freq
fl <<- fl[frq1 > 0.05,]
samp10 <<- subset(fl, ncells==10)
samp1 <<- subset(fl, ncells==1)
remove(samp10)
thiss1 <- samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1')),]
includeRun_SafeCss <- TRUE
if (includeRun_SafeCss) {
fixed <- model.matrix(~scale(ngeneson) + PatientID + run + SafeCS, colData(thiss1), contrasts=list(PatientID='contr.sum', run='contr.sum', SafeCS='contr.sum'))
} else
fixed <- model.matrix(~scale(ngeneson) + PatientID, colData(thiss1), contrasts=list(PatientID='contr.sum'))
ee1 <- precenter(t(assay(thiss1)))
require(RCurl)
getURL
getURL("https://github.com/amcdavid/HurdleNormal/blob/b4322d38423731d332fc2615b62f148a9f6f0902/inst/aoas_simulations/common.R",
ssl.verifypeer = FALSE)
require(RCurl)
eval(parse(text = getURL("https://github.com/amcdavid/HurdleNormal/blob/b4322d38423731d332fc2615b62f148a9f6f0902/inst/aoas_simulations/common.R",
ssl.verifypeer = FALSE)))
eval(parse(text = getURL("https://raw.github.com/amcdavid/HurdleNormal/blob/b4322d38423731d332fc2615b62f148a9f6f0902/inst/aoas_simulations/common.R",
ssl.verifypeer = FALSE)))
library(devtools)
source_url("https://raw.github.com/amcdavid/HurdleNormal/blob/b4322d38423731d332fc2615b62f148a9f6f0902/inst/aoas_simulations/common.R")
?source_url
source_url("https://gist.github.com/amcdavid/HurdleNormal/blob/b4322d38423731d332fc2615b62f148a9f6f0902/inst/aoas_simulations/common.R")
source_url("https://https://raw.githubusercontent.com/amcdavid/HurdleNormal/b4322d38423731d332fc2615b62f148a9f6f0902/inst/aoas_simulations/common.R")
library(MAST)
library(stringr)
library(devtools)
source_url("https://raw.githubusercontent.com/amcdavid/HurdleNormal/b4322d38423731d332fc2615b62f148a9f6f0902/inst/aoas_simulations/common.R")
?HurdleNormal
??HurdleNormal
source_url("https://raw.githubusercontent.com/amcdavid/HurdleNormal/b4322d38423731d332fc2615b62f148a9f6f0902/inst/aoas_simulations/common.R")
HurdleNormal::loadModule()
HurdleNormal::loadModule
HurdleNormal::loadModule("a")
HurdleNormal::loadModule("aoas_simulations")
source_url("https://raw.githubusercontent.com/amcdavid/HurdleNormal/b4322d38423731d332fc2615b62f148a9f6f0902/inst/aoas_simulations/common.R")
source_url
require(RCurl)
require(RCurl)
eval(parse(text = getURL("https://raw.githubusercontent.com/amcdavid/HurdleNormal/b4322d38423731d332fc2615b62f148a9f6f0902/inst/aoas_simulations/common.R",
ssl.verifypeer = FALSE)))
?getURL
setwd("~/Dropbox/Safe/Research/Zero/310418/cell")
library(MAST)
library(stringr)
source('common.R')
library(MAST)
library(stringr)
source('McDavid/HurdleNormal/inst/aoas_simulations/common.R')
data(shalek2014)
setwd("~/Dropbox/Safe/Research/Zero/310418/cell")
setwd("~/Dropbox/Safe/Research/Zero/310418/cell/McDavid/HurdleNormal/inst/aoas_simulations")
source('common.R') # Under github/amcdavid/HurdleNormal/inst/aoas_simulations
raw <- readRDS('AllCells.rds')
loadLausanne()
thiss1 <- samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1')),]
library(MAST)
library(stringr)
setwd("~/Dropbox/Safe/Research/Zero/310418/cell/McDavid/HurdleNormal/inst/aoas_simulations")
source('common.R') # Under github/amcdavid/HurdleNormal/inst/aoas_simulations
loadLausanne()
thiss1 <- samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1')),]
includeRun_SafeCss <- TRUE
if (includeRun_SafeCss) {
fixed <- model.matrix(~scale(ngeneson) + PatientID + run + SafeCS, colData(thiss1), contrasts=list(PatientID='contr.sum', run='contr.sum', SafeCS='contr.sum'))
} else
fixed <- model.matrix(~scale(ngeneson) + PatientID, colData(thiss1), contrasts=list(PatientID='contr.sum'))
ee1 <- precenter(t(assay(thiss1)))
dim(ee1)
control <- list(tol=1e-6, maxrounds=300, newton0=T, fista=FALSE, debug=0, returnHessian=FALSE)
out <- fitSomeModels(thiss1, fixed=fixed, control=control, parallel=T, nlambda=50, lambda.min.ratio=.3)
si <- setupStabilityIndex(ee1, B=50)
fixed <- model.matrix(~scale(ngeneson) + PatientID, colData(thiss1), contrasts=list(PatientID='contr.sum'))
ee1 <- precenter(t(assay(thiss1)))
control <- list(tol=1e-6, maxrounds=300, newton0=T, fista=FALSE, debug=0, returnHessian=FALSE)
out <- fitSomeModels(thiss1, fixed=fixed, control=control, parallel=T, nlambda=50, lambda.min.ratio=.3)
ee1
thiss1
library(MAST)
library(stringr)
source('common.R')
loadLausanne()
samp1 <- subset(samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1', 'GZMA')),], SafeCS%in% c('pp'))
thiss1 <- subset(samp1, run=="Healthy")
fixed <- model.matrix(~scale(ngeneson)+PatientID, colData(thiss1), contrasts=list(PatientID='contr.sum'))
ee1 <- precenter(t(assay(thiss1)))
control <- list(tol=3e-3, maxrounds=300, newton0=T, fista=FALSE, debug=0, returnHessian=FALSE)
out <- fitSomeModels(thiss1, fixed=fixed, control=control, parallel=T, nlambda=50, lambda.min.ratio=.3)
dim(thiss1)
thiss1 <- samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1')),]
dim(thiss1)
setwd("~/Dropbox/Safe/Research/Zero/310418/cell/McDavid/HurdleNormal/inst/aoas_simulations")
source('common.R') # Under github/amcdavid/HurdleNormal/inst/aoas_simulations
loadLausanne()
thiss1 <- samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1')),]
dim(thiss1)
includeRun_SafeCss <- TRUE
if (includeRun_SafeCss) {
fixed <- model.matrix(~scale(ngeneson) + PatientID + run + SafeCS, colData(thiss1), contrasts=list(PatientID='contr.sum', run='contr.sum', SafeCS='contr.sum'))
} else
fixed <- model.matrix(~scale(ngeneson) + PatientID, colData(thiss1), contrasts=list(PatientID='contr.sum'))
ee1 <- precenter(t(assay(thiss1)))
control <- list(tol=1e-6, maxrounds=300, newton0=T, fista=FALSE, debug=0, returnHessian=FALSE)
out <- fitSomeModels(thiss1, fixed=fixed, control=control, parallel=T, nlambda=50, lambda.min.ratio=.3)
out <- fitSomeModels(thiss1, fixed=fixed, control=control, parallel=T, nlambda=50, lambda.min.ratio=.3)
x
allgrid
?setkey
fixed
sampCenter
parallel
colnames(samp)
library(MAST)
library(stringr)
source('common.R')
loadLausanne()
samp1 <- subset(samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1', 'GZMA')),], SafeCS%in% c('pp'))
thiss1 <- samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1')),]
includeRun_SafeCss <- TRUE
if (includeRun_SafeCss) {
fixed <- model.matrix(~scale(ngeneson) + PatientID + run + SafeCS, colData(thiss1), contrasts=list(PatientID='contr.sum', run='contr.sum', SafeCS='contr.sum'))
} else
fixed <- model.matrix(~scale(ngeneson) + PatientID, colData(thiss1), contrasts=list(PatientID='contr.sum'))
ee1 <- precenter(t(assay(thiss1)))
control <- list(tol=1e-6, maxrounds=300, newton0=T, fista=FALSE, debug=0, returnHessian=FALSE)
out <- fitSomeModels(thiss1, fixed=fixed, control=control, parallel=T, nlambda=50, lambda.min.ratio=.3)
library(MAST)
library(stringr)
setwd("~/Dropbox/Safe/Research/Zero/310418/cell/McDavid/HurdleNormal/inst/aoas_simulations")
source('common.R') # Under github/amcdavid/HurdleNormal/inst/aoas_simulations
loadLausanne()
thiss1 <- samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1')),]
library(MAST)
library(stringr)
setwd("~/Dropbox/Safe/Research/Zero/310418/cell/McDavid/HurdleNormal/inst/aoas_simulations")
source('common.R') # Under github/amcdavid/HurdleNormal/inst/aoas_simulations
loadLausanne()
samp1 <- subset(samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1', 'GZMA')),], SafeCS%in% c('pp'))
thiss1 <- subset(samp1, run=="Healthy")
includeRun_SafeCss <- TRUE
if (includeRun_SafeCss) {
fixed <- model.matrix(~scale(ngeneson) + PatientID + run + SafeCS, colData(thiss1), contrasts=list(PatientID='contr.sum', run='contr.sum', SafeCS='contr.sum'))
} else
fixed <- model.matrix(~scale(ngeneson) + PatientID, colData(thiss1), contrasts=list(PatientID='contr.sum'))
ee1 <- precenter(t(assay(thiss1)))
control <- list(tol=1e-6, maxrounds=300, newton0=T, fista=FALSE, debug=0, returnHessian=FALSE)
out <- fitSomeModels(thiss1, fixed=fixed, control=control, parallel=T, nlambda=50, lambda.min.ratio=.3)
library(MAST)
library(stringr)
setwd("~/Dropbox/Safe/Research/Zero/310418/cell/McDavid/HurdleNormal/inst/aoas_simulations")
source('common.R') # Under github/amcdavid/HurdleNormal/inst/aoas_simulations
loadLausanne()
thiss1 <- samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1')),]
includeRun_SafeCss <- F
if (includeRun_SafeCss) {
fixed <- model.matrix(~scale(ngeneson) + PatientID + run + SafeCS, colData(thiss1), contrasts=list(PatientID='contr.sum', run='contr.sum', SafeCS='contr.sum'))
} else
fixed <- model.matrix(~scale(ngeneson) + PatientID, colData(thiss1), contrasts=list(PatientID='contr.sum'))
ee1 <- precenter(t(assay(thiss1)))
control <- list(tol=1e-6, maxrounds=300, newton0=T, fista=FALSE, debug=0, returnHessian=FALSE)
out <- fitSomeModels(thiss1, fixed=fixed, control=control, parallel=T, nlambda=50, lambda.min.ratio=.3)
library(MAST)
library(stringr)
setwd("~/Dropbox/Safe/Research/Zero/310418/cell/McDavid/HurdleNormal/inst/aoas_simulations")
source('common.R') # Under github/amcdavid/HurdleNormal/inst/aoas_simulations
loadLausanne()
samp1 <- subset(samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1', 'GZMA')),], SafeCS%in% c('pp'))
thiss1 <- subset(samp1, run=="Healthy")
includeRun_SafeCss <- F
if (includeRun_SafeCss) {
fixed <- model.matrix(~scale(ngeneson) + PatientID + run + SafeCS, colData(thiss1), contrasts=list(PatientID='contr.sum', run='contr.sum', SafeCS='contr.sum'))
} else
fixed <- model.matrix(~scale(ngeneson) + PatientID, colData(thiss1), contrasts=list(PatientID='contr.sum'))
ee1 <- precenter(t(assay(thiss1)))
control <- list(tol=1e-6, maxrounds=300, newton0=T, fista=FALSE, debug=0, returnHessian=FALSE)
out <- fitSomeModels(thiss1, fixed=fixed, control=control, parallel=T, nlambda=50, lambda.min.ratio=.3)
library(MAST)
library(stringr)
setwd("~/Dropbox/Safe/Research/Zero/310418/cell/McDavid/HurdleNormal/inst/aoas_simulations")
source('common.R') # Under github/amcdavid/HurdleNormal/inst/aoas_simulations
loadLausanne()
thiss1 <- samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1')),]
library(MAST)
library(stringr)
setwd("~/Dropbox/Safe/Research/Zero/310418/cell/McDavid/HurdleNormal/inst/aoas_simulations")
source('common.R') # Under github/amcdavid/HurdleNormal/inst/aoas_simulations
loadLausanne()
thiss1 <- samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1')),]
includeRun_SafeCss <- F
fixed <- model.matrix(~scale(ngeneson)+PatientID, colData(thiss1), contrasts=list(PatientID='contr.sum'))
ee1 <- precenter(t(assay(thiss1)))
control <- list(tol=3e-3, maxrounds=300, newton0=T, fista=FALSE, debug=0, returnHessian=FALSE)
out <- fitSomeModels(thiss1, fixed=fixed, control=control, parallel=T, nlambda=50, lambda.min.ratio=.3)
out <- fitSomeModels(thiss1, fixed=fixed, control=control, parallel=T, nlambda=50, lambda.min.ratio=.3)
samp <- thiss1
allindices <- seq_len(ncol(samp))
if(is.null(colnames(samp))) colnames(samp) <- seq_len(ncol(samp))
indices <- if(missing(indices))  allindices else indices
indices
samp1c <- t(assay(samp))
sampCenter <- precenter(t(assay(samp)))
out <- setNames(as.list(models), models)
models <- "hurdle"
out <- setNames(as.list(models), models)
parallel
parallel <- T
lambda.min.ratio=.3
nlambda=50
checkpointDir
checkpointDir=NULL
keepNodePaths=TRUE
hCNgo <- fitHurdle(sampCenter, parallel=parallel, control=control, makeModelArgs=list(scale=FALSE, fixed=fixed, center=TRUE, conditionalCenter=TRUE), lambda.min.ratio=lambda.min.ratio, nlambda=nlambda, checkpointDir=checkpointDir, keepNodePaths=keepNodePaths)
allindices <- seq_len(ncol(samp))
allindices
if(is.null(colnames(samp))) colnames(samp) <- seq_len(ncol(samp))
indices <- if(missing(indices))  allindices else indices
ndices <- allindices
if(length(setdiff(indices, allindices))>0) stop('`indices` out of range')
accessDirOrDie(checkpointDir)
timing <- system.time(result <- applyfun(indices, function(i){
message('node=', i, ' nodeId=', colnames(samp)[i])
if(!is.null(checkpointDir) && file.exists(fname <- file.path(checkpointDir, paste0('gene', i, '.rds')))){
res <- readRDS(fname)
##res <- NA
} else{
if(!is.null(fixed)){
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
} else{
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs)
}
mm <- do.call(makeModel, makeModelArgs)
blk <- Block(mm)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i], ...)
if(!is.null(checkpointDir)) saveRDS(res, fname)
}
res
}))
applyfun <- lapply
timing <- system.time(result <- applyfun(indices, function(i){
message('node=', i, ' nodeId=', colnames(samp)[i])
if(!is.null(checkpointDir) && file.exists(fname <- file.path(checkpointDir, paste0('gene', i, '.rds')))){
res <- readRDS(fname)
##res <- NA
} else{
if(!is.null(fixed)){
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
} else{
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs)
}
mm <- do.call(makeModel, makeModelArgs)
blk <- Block(mm)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i], ...)
if(!is.null(checkpointDir)) saveRDS(res, fname)
}
res
}))
indices
allindices
indices <- allindices
if(length(setdiff(indices, allindices))>0) stop('`indices` out of range')
timing <- system.time(result <- applyfun(indices, function(i){
message('node=', i, ' nodeId=', colnames(samp)[i])
if(!is.null(checkpointDir) && file.exists(fname <- file.path(checkpointDir, paste0('gene', i, '.rds')))){
res <- readRDS(fname)
##res <- NA
} else{
if(!is.null(fixed)){
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
} else{
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs)
}
mm <- do.call(makeModel, makeModelArgs)
blk <- Block(mm)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i], ...)
if(!is.null(checkpointDir)) saveRDS(res, fname)
}
res
}))
makeModelArgs=list(scale=FALSE, fixed=fixed, center=TRUE, conditionalCenter=TRUE)
timing <- system.time(result <- applyfun(indices, function(i){
message('node=', i, ' nodeId=', colnames(samp)[i])
if(!is.null(checkpointDir) && file.exists(fname <- file.path(checkpointDir, paste0('gene', i, '.rds')))){
res <- readRDS(fname)
##res <- NA
} else{
if(!is.null(fixed)){
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
} else{
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs)
}
mm <- do.call(makeModel, makeModelArgs)
blk <- Block(mm)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i], ...)
if(!is.null(checkpointDir)) saveRDS(res, fname)
}
res
}))
fixed
i
indices
i <- 1
message('node=', i, ' nodeId=', colnames(samp)[i])
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
mm <- do.call(makeModel, makeModelArgs)
makeModelArgs
makeModelArgs$fixed <- fixed
mm <- do.call(makeModel, makeModelArgs)
makeModel
makeModelArgs
names(makeModelArgs)
makeModelArgs[[3]]
makeModelArgs[[3]] - makeModelArgs[[6]]
makeModelArgs[[6]] <- NULL
mm <- do.call(makeModel, makeModelArgs)
mm
zif
samp
samp[,-1]
mm <- do.call(makeModel, makeModelArgs)
mm <- do.call(makeModel, makeModelArgs)
timing <- system.time(result <- applyfun(indices, function(i){
message('node=', i, ' nodeId=', colnames(samp)[i])
if(!is.null(checkpointDir) && file.exists(fname <- file.path(checkpointDir, paste0('gene', i, '.rds')))){
res <- readRDS(fname)
##res <- NA
} else{
if(!is.null(fixed)){
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
} else{
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs)
}
mm <- do.call(makeModel, makeModelArgs)
blk <- Block(mm)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i], ...)
if(!is.null(checkpointDir)) saveRDS(res, fname)
}
res
}))
makeModelArgs$fixed <- NULL
timing <- system.time(result <- applyfun(indices, function(i){
message('node=', i, ' nodeId=', colnames(samp)[i])
if(!is.null(checkpointDir) && file.exists(fname <- file.path(checkpointDir, paste0('gene', i, '.rds')))){
res <- readRDS(fname)
##res <- NA
} else{
if(!is.null(fixed)){
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
} else{
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs)
}
mm <- do.call(makeModel, makeModelArgs)
blk <- Block(mm)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i], ...)
if(!is.null(checkpointDir)) saveRDS(res, fname)
}
res
}))
names(makeModelArgs)
makeModelArgs$fixed <-  fixed
timing <- system.time(result <- applyfun(indices, function(i){
message('node=', i, ' nodeId=', colnames(samp)[i])
if(!is.null(checkpointDir) && file.exists(fname <- file.path(checkpointDir, paste0('gene', i, '.rds')))){
res <- readRDS(fname)
##res <- NA
} else{
if(!is.null(fixed)){
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
} else{
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs)
}
mm <- do.call(makeModel, makeModelArgs)
blk <- Block(mm)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i], ...)
if(!is.null(checkpointDir)) saveRDS(res, fname)
}
res
}))
zif
timing <- system.time(result <- applyfun(indices, function(i){
message('node=', i, ' nodeId=', colnames(samp)[i])
if(!is.null(checkpointDir) && file.exists(fname <- file.path(checkpointDir, paste0('gene', i, '.rds')))){
res <- readRDS(fname)
##res <- NA
} else{
if(!is.null(fixed)){
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
} else{
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs)
}
mm <- do.call(makeModel, makeModelArgs)
blk <- Block(mm)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i], ...)
if(!is.null(checkpointDir)) saveRDS(res, fname)
}
res
}))
timing <- system.time(result <- applyfun(indices, function(i){
message('node=', i, ' nodeId=', colnames(samp)[i])
if(!is.null(checkpointDir) && file.exists(fname <- file.path(checkpointDir, paste0('gene', i, '.rds')))){
res <- readRDS(fname)
##res <- NA
} else{
if(!is.null(fixed)){
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
} else{
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs)
}
mm <- do.call(makeModel, makeModelArgs)
blk <- Block(mm)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i], ...)
if(!is.null(checkpointDir)) saveRDS(res, fname)
}
res
}))
c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
names(c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed)))
makeModelArgs$fixed <- makeModelArgs$zif <- NULL
timing <- system.time(result <- applyfun(indices, function(i){
message('node=', i, ' nodeId=', colnames(samp)[i])
if(!is.null(checkpointDir) && file.exists(fname <- file.path(checkpointDir, paste0('gene', i, '.rds')))){
res <- readRDS(fname)
##res <- NA
} else{
if(!is.null(fixed)){
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
} else{
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs)
}
mm <- do.call(makeModel, makeModelArgs)
blk <- Block(mm)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i], ...)
if(!is.null(checkpointDir)) saveRDS(res, fname)
}
res
}))
timing <- system.time(result <- applyfun(indices, function(i){
message('node=', i, ' nodeId=', colnames(samp)[i])
if(!is.null(checkpointDir) && file.exists(fname <- file.path(checkpointDir, paste0('gene', i, '.rds')))){
res <- readRDS(fname)
##res <- NA
} else{
if(!is.null(fixed)){
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
} else{
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs)
}
mm <- do.call(makeModel, makeModelArgs)
blk <- Block(mm)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i], ...)
if(!is.null(checkpointDir)) saveRDS(res, fname)
}
res
}))
samp
samp[,-1]
samp <- thiss
samp <- thiss1
samp1c <- t(assay(samp))
sampCenter <- precenter(t(assay(samp)))
out <- setNames(as.list(models), models)
samp <- sampCenter
allindices <- seq_len(ncol(samp))
if(is.null(colnames(samp))) colnames(samp) <- seq_len(ncol(samp))
indices <- allindices
timing <- system.time(result <- applyfun(indices, function(i){
message('node=', i, ' nodeId=', colnames(samp)[i])
if(!is.null(checkpointDir) && file.exists(fname <- file.path(checkpointDir, paste0('gene', i, '.rds')))){
res <- readRDS(fname)
##res <- NA
} else{
if(!is.null(fixed)){
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
} else{
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs)
}
mm <- do.call(makeModel, makeModelArgs)
blk <- Block(mm)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i], ...)
if(!is.null(checkpointDir)) saveRDS(res, fname)
}
res
}))
indices
i <- 1
makeModelArgs
makeModelArgs <- c(list(zif=samp[,-i]), makeModelArgs, list(fixed=fixed))
mm <- do.call(makeModel, makeModelArgs)
blk <- Block(mm)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i], ...)
res <- cgpaths(samp[,i], mm, Blocks=blk,  nodeId=colnames(samp)[i],)
res
library(MAST)
library(stringr)
setwd("~/Dropbox/Safe/Research/Zero/310418/cell/McDavid/HurdleNormal/inst/aoas_simulations")
source('common.R') # Under github/amcdavid/HurdleNormal/inst/aoas_simulations
loadLausanne()
thiss1 <- samp1[setdiff(names(which(freq(samp1) > .05)), c('CXCR5', 'PDCD1')),]
fixed <- model.matrix(~scale(ngeneson) + PatientID, colData(thiss1), contrasts=list(PatientID='contr.sum'))
ee1 <- precenter(t(assay(thiss1)))
control <- list(tol=1e-6, maxrounds=300, newton0=T, fista=FALSE, debug=0, returnHessian=FALSE)
out <- fitSomeModels(thiss1, fixed=fixed, control=control, parallel=T, nlambda=50, lambda.min.ratio=.3)
