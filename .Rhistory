names(plot_list)[!names(plot_list) %in% c("Const", "g0(x)")] <- paste("x^", names(plot_list)[!names(plot_list) %in% c("Const", "g0(x)")], sep="")
par(mar = c(5,5,2,14), mfrow = c(1,1), xpd=TRUE, bty="n")
plot(c(), c(), xlim=c(min(param2s), max(param2s)),
ylim=range(plot_vector), axes=FALSE, xlab="", ylab="")
axis(4, at=round(seq(min(plot_vector), max(plot_vector), length.out=6), 3), cex.axis=1.5, ylab=plot_name)
mtext(plot_name, side=4, cex=1.5, line=2.5)
par(new=TRUE)
plot(c(), c(), xlim=c(min(param2s), max(param2s)),
ylim=range(plot_vector / plot_list[[1]]), main="", cex.lab=1.5, xlab="Truncation quantile", ylab=paste(plot_name, ", compared to h(x) = 1", sep=""),
axes=FALSE, log=ifelse(domain_name=="simplex", "x", ""))#xaxt="n")
axis(1, at=unique(param2s), cex.axis=1.5)
axis(2, at=round(seq(min(plot_vector / plot_list[[1]]), max(plot_vector / plot_list[[1]]), length.out=6), 3), cex.axis=1.5)
#axis(2, at=round(c(min(plot_vector)-(max(plot_vector)-min(plot_vector))*0.04, max(plot_vector)+(max(plot_vector)-min(plot_vector))*0.04),3))
library(RColorBrewer)
#color <- rainbow(length(unique(param1s))+2)[1:length(unique(param1s))]
#color <- unlist(mapply(brewer.pal, brewer.pal.info[brewer.pal.info$category == 'qual',]$maxcolors, rownames(brewer.pal.info[brewer.pal.info$category == 'qual',])))
#color <- color[1:length(unique(param1s))]
color <- c("black", "#DB1C1C", "#FDC086", "#EDED00", "#7FC97F", "#00FFFF",
"#386CB0",  "#E1CCFF", "#9D00FF", "#BABABA", "#000000")[1:length(plot_list)]
ltys <- c("dotted", "dotdash", rep("solid", length(plot_list)-2))
points(unique(param2s), rep(1, length(unique(param2s))), type="l", lty=ltys[1], col=color[1], lwd=5)
points(as.numeric(names(plot_list[["g0(x)"]])), plot_list[["g0(x)"]] / plot_list[[1]], col=color[2], type="l", lty=ltys[2], lwd=5)
for (i in 3:length(plot_list))
points(as.numeric(names(plot_list[[i]])), plot_list[[i]] / plot_list[[1]], col=color[i], type="l", lwd=5)
legend("topright", x.intersp = 0.15, y.intersp=0.8, inset = c(-1.13,-0.05),
legend=c(paste("Const"), names(plot_list)[-1]),#, ":[", round(sapply(plot_list, min), 3), ",", round(sapply(plot_list, max), 3), "]", sep=""),
col = color, pch=rep(46,length(color)),
lwd = rep(5,length(color)), lty = ltys, ncol = 1, seg.len=rep(0.5,length(color)),
cex = 1.7, bty = "n", text.width = .03, title = expression("        Function"))
dev.copy2pdf(width=10, height=8,
file=paste("_Plots/",gsub("tSUBttTRIAL", "", pattern),
ifelse(to_plot == "avg_AUCs", "", paste("_",to_plot,sep="")),
".pdf",sep=""))
}
rm(list=ls()[!ls() %in% c("parse_hname_to_param")])
}
for (pattern in c(list.files(".", "tSUBttTRIAL_")[1])){
load(pattern)
to_plots <- c("avg_AUCs")
if (grepl("log_log_sum0", pattern)) {to_plots <- c(to_plots, "cv_1", "cv_2", "cv_F")}
for (to_plot in to_plots) {
h_to_appear <- h_names
if (!"1" %in% h_to_appear) stop()
his <- match(h_to_appear, h_names)
h_names <- h_to_appear
if (to_plot == "avg_AUCs") {
avg_tpfp_by_mode <- lapply(his, function(hi){avg_tpfp_by_mode[[hi]]})
avg_AUCs <- avg_AUCs[his]
names(avg_AUCs) <- h_names
AUCs <- sapply(1:length(avg_tpfp_by_mode), function(m){AUC(avg_tpfp_by_mode[[m]])})
avg_AUCs - AUCs ## Should be the same, but might be slightly different due to different number of true edges (so the denominator for FPR is different in K_trial)
AUCs <- avg_AUCs ## More accurate
AUCs_by_trial <- t(sapply(1:length(TPFP_BICs), function(trial){sapply(his, function(m){AUC(rbind(0, TPFP_BICs[[trial]]$tpfp[[m]][order(TPFP_BICs[[trial]]$tpfp[[m]][,2]), ], 1))})}))
apply(AUCs_by_trial, 2, sd)
paste(h_names, round(colMeans(AUCs_by_trial), 3), round(apply(AUCs_by_trial, 2, sd),3), sep = " & ")
plot_vector <- avg_AUCs
plot_name <- "AUC"
} else {
if (to_plot == "cv_1") {
plot_vector <- avg_error_norm_cv$`1_rel`
plot_name <- "Error, 1-norm"
}
else if (to_plot == "cv_2") {
plot_vector <- avg_error_norm_cv$`2_rel`
plot_name <- "Error, 2-norm"
}
else if (to_plot == "cv_F") {
plot_vector <- avg_error_norm_cv$`F_rel`
plot_name <- "Error, F-norm"
}
else stop()
plot_vector <- plot_vector[his]
names(plot_vector) <- h_names
}
plot_list <- list("Const"=plot_vector[h_names == "1"])
for (h_name in h_names[h_names != "1"]) {
tmp <- parse_hname_to_param(h_name)
param1 <- toString(tmp[1]); param2 <- toString(tmp[2])
plot_list[[param1]] <- c(plot_list[[param1]], plot_vector[h_name])
names(plot_list[[param1]])[length(plot_list[[param1]])] <- param2
plot_list[[param1]] <- plot_list[[param1]][order(as.numeric(names(plot_list[[param1]])))]
}
plot_list <- c(plot_list[c("Const", "g0(x)")], plot_list[!names(plot_list) %in% c("Const", "g0(x)")])
param2s <- unique(c(sapply(plot_list[!names(plot_list) %in% c("Const", "g0(x)")], function(l){as.numeric(names(l))})))
param1_ord <- c(1, 2, order(as.numeric(names(plot_list)[-c(1,2)])) + 2)
plot_list <- plot_list[param1_ord]
names(plot_list)[!names(plot_list) %in% c("Const", "g0(x)")] <- paste("x^", names(plot_list)[!names(plot_list) %in% c("Const", "g0(x)")], sep="")
par(mar = c(5,5,2,14), mfrow = c(1,1), xpd=TRUE, bty="n")
plot(c(), c(), xlim=c(min(param2s), max(param2s)),
ylim=range(plot_vector), axes=FALSE, xlab="", ylab="")
axis(4, at=round(seq(min(plot_vector), max(plot_vector), length.out=6), 3), cex.axis=1.5, ylab=plot_name)
mtext(plot_name, side=4, cex=1.5, line=2.5)
par(new=TRUE)
plot(c(), c(), xlim=c(min(param2s), max(param2s)),
ylim=range(plot_vector / plot_list[[1]]), main="", cex.lab=1.5, xlab="Truncation quantile", ylab=paste(plot_name, ", compared to h(x) = 1", sep=""),
axes=FALSE, log=ifelse(domain_name=="simplex", "x", ""))#xaxt="n")
axis(1, at=unique(param2s), cex.axis=1.5)
axis(2, at=round(seq(min(plot_vector / plot_list[[1]]), max(plot_vector / plot_list[[1]]), length.out=6), 3), cex.axis=1.5)
#axis(2, at=round(c(min(plot_vector)-(max(plot_vector)-min(plot_vector))*0.04, max(plot_vector)+(max(plot_vector)-min(plot_vector))*0.04),3))
library(RColorBrewer)
#color <- rainbow(length(unique(param1s))+2)[1:length(unique(param1s))]
#color <- unlist(mapply(brewer.pal, brewer.pal.info[brewer.pal.info$category == 'qual',]$maxcolors, rownames(brewer.pal.info[brewer.pal.info$category == 'qual',])))
#color <- color[1:length(unique(param1s))]
color <- c("black", "#DB1C1C", "#FDC086", "#EDED00", "#7FC97F", "#00FFFF",
"#386CB0",  "#E1CCFF", "#9D00FF", "#BABABA", "#000000")[1:length(plot_list)]
ltys <- c("dotted", "dotdash", rep("solid", length(plot_list)-2))
points(unique(param2s), rep(1, length(unique(param2s))), type="l", lty=ltys[1], col=color[1], lwd=5)
points(as.numeric(names(plot_list[["g0(x)"]])), plot_list[["g0(x)"]] / plot_list[[1]], col=color[2], type="l", lty=ltys[2], lwd=5)
for (i in 3:length(plot_list))
points(as.numeric(names(plot_list[[i]])), plot_list[[i]] / plot_list[[1]], col=color[i], type="l", lwd=5)
legend("topright", x.intersp = 0.15, y.intersp=0.8, inset = c(-1.13,-0.05),
legend=c(paste("Const"), names(plot_list)[-1]),#, ":[", round(sapply(plot_list, min), 3), ",", round(sapply(plot_list, max), 3), "]", sep=""),
col = color, pch=rep(46,length(color)),
lwd = rep(5,length(color)), lty = ltys, ncol = 1, seg.len=rep(0.5,length(color)),
cex = 1.7, bty = "n", text.width = .03, title = expression("        Function"))
dev.copy2pdf(width=10, height=8,
file=paste("_Plots/",gsub("tSUBttTRIAL", "", pattern),
ifelse(to_plot == "avg_AUCs", "", paste("_",to_plot,sep="")),
".pdf",sep=""))
}
rm(list=ls()[!ls() %in% c("parse_hname_to_param")])
}
for (pattern in list.files(".", "tSUBttTRIAL_")){
load(pattern)
to_plots <- c("avg_AUCs")
if (grepl("log_log_sum0", pattern)) {to_plots <- c(to_plots, "cv_1", "cv_2", "cv_F")}
for (to_plot in to_plots) {
h_to_appear <- h_names
if (!"1" %in% h_to_appear) stop()
his <- match(h_to_appear, h_names)
h_names <- h_to_appear
if (to_plot == "avg_AUCs") {
avg_tpfp_by_mode <- lapply(his, function(hi){avg_tpfp_by_mode[[hi]]})
avg_AUCs <- avg_AUCs[his]
names(avg_AUCs) <- h_names
AUCs <- sapply(1:length(avg_tpfp_by_mode), function(m){AUC(avg_tpfp_by_mode[[m]])})
avg_AUCs - AUCs ## Should be the same, but might be slightly different due to different number of true edges (so the denominator for FPR is different in K_trial)
AUCs <- avg_AUCs ## More accurate
AUCs_by_trial <- t(sapply(1:length(TPFP_BICs), function(trial){sapply(his, function(m){AUC(rbind(0, TPFP_BICs[[trial]]$tpfp[[m]][order(TPFP_BICs[[trial]]$tpfp[[m]][,2]), ], 1))})}))
apply(AUCs_by_trial, 2, sd)
paste(h_names, round(colMeans(AUCs_by_trial), 3), round(apply(AUCs_by_trial, 2, sd),3), sep = " & ")
plot_vector <- avg_AUCs
plot_name <- "AUC"
} else {
if (to_plot == "cv_1") {
plot_vector <- avg_error_norm_cv$`1_rel`
plot_name <- "Error, 1-norm"
}
else if (to_plot == "cv_2") {
plot_vector <- avg_error_norm_cv$`2_rel`
plot_name <- "Error, 2-norm"
}
else if (to_plot == "cv_F") {
plot_vector <- avg_error_norm_cv$`F_rel`
plot_name <- "Error, F-norm"
}
else stop()
plot_vector <- plot_vector[his]
names(plot_vector) <- h_names
}
plot_list <- list("Const"=plot_vector[h_names == "1"])
for (h_name in h_names[h_names != "1"]) {
tmp <- parse_hname_to_param(h_name)
param1 <- toString(tmp[1]); param2 <- toString(tmp[2])
plot_list[[param1]] <- c(plot_list[[param1]], plot_vector[h_name])
names(plot_list[[param1]])[length(plot_list[[param1]])] <- param2
plot_list[[param1]] <- plot_list[[param1]][order(as.numeric(names(plot_list[[param1]])))]
}
plot_list <- c(plot_list[c("Const", "g0(x)")], plot_list[!names(plot_list) %in% c("Const", "g0(x)")])
param2s <- unique(c(sapply(plot_list[!names(plot_list) %in% c("Const", "g0(x)")], function(l){as.numeric(names(l))})))
param1_ord <- c(1, 2, order(as.numeric(names(plot_list)[-c(1,2)])) + 2)
plot_list <- plot_list[param1_ord]
names(plot_list)[!names(plot_list) %in% c("Const", "g0(x)")] <- paste("x^", names(plot_list)[!names(plot_list) %in% c("Const", "g0(x)")], sep="")
par(mar = c(5,5,2,14), mfrow = c(1,1), xpd=TRUE, bty="n")
plot(c(), c(), xlim=c(min(param2s), max(param2s)),
ylim=range(plot_vector), axes=FALSE, xlab="", ylab="")
axis(4, at=round(seq(min(plot_vector), max(plot_vector), length.out=6), 3), cex.axis=1.5, ylab=plot_name)
mtext(plot_name, side=4, cex=1.5, line=2.5)
par(new=TRUE)
plot(c(), c(), xlim=c(min(param2s), max(param2s)),
ylim=range(plot_vector / plot_list[[1]]), main="", cex.lab=1.5, xlab="Truncation quantile", ylab=paste(plot_name, ", compared to h(x) = 1", sep=""),
axes=FALSE, log=ifelse(domain_name=="simplex", "x", ""))#xaxt="n")
axis(1, at=unique(param2s), cex.axis=1.5)
axis(2, at=round(seq(min(plot_vector / plot_list[[1]]), max(plot_vector / plot_list[[1]]), length.out=6), 3), cex.axis=1.5)
#axis(2, at=round(c(min(plot_vector)-(max(plot_vector)-min(plot_vector))*0.04, max(plot_vector)+(max(plot_vector)-min(plot_vector))*0.04),3))
library(RColorBrewer)
#color <- rainbow(length(unique(param1s))+2)[1:length(unique(param1s))]
#color <- unlist(mapply(brewer.pal, brewer.pal.info[brewer.pal.info$category == 'qual',]$maxcolors, rownames(brewer.pal.info[brewer.pal.info$category == 'qual',])))
#color <- color[1:length(unique(param1s))]
color <- c("black", "#DB1C1C", "#FDC086", "#EDED00", "#7FC97F", "#00FFFF",
"#386CB0",  "#E1CCFF", "#9D00FF", "#BABABA", "#000000")[1:length(plot_list)]
ltys <- c("dotted", "dotdash", rep("solid", length(plot_list)-2))
points(unique(param2s), rep(1, length(unique(param2s))), type="l", lty=ltys[1], col=color[1], lwd=5)
points(as.numeric(names(plot_list[["g0(x)"]])), plot_list[["g0(x)"]] / plot_list[[1]], col=color[2], type="l", lty=ltys[2], lwd=5)
for (i in 3:length(plot_list))
points(as.numeric(names(plot_list[[i]])), plot_list[[i]] / plot_list[[1]], col=color[i], type="l", lwd=5)
legend("topright", x.intersp = 0.15, y.intersp=0.8, inset = c(-1.13,-0.05),
legend=c(paste("Const"), names(plot_list)[-1]),#, ":[", round(sapply(plot_list, min), 3), ",", round(sapply(plot_list, max), 3), "]", sep=""),
col = color, pch=rep(46,length(color)),
lwd = rep(5,length(color)), lty = ltys, ncol = 1, seg.len=rep(0.5,length(color)),
cex = 1.7, bty = "n", text.width = .03, title = expression("        Function"))
dev.copy2pdf(width=10, height=8,
file=paste("_Plots/",gsub("tSUBttTRIAL", "", pattern),
ifelse(to_plot == "avg_AUCs", "", paste("_",to_plot,sep="")),
".pdf",sep=""))
}
rm(list=ls()[!ls() %in% c("parse_hname_to_param")])
}
setwd("~/Dropbox/Safe/Research/GSM/final/genscore")
library(knitr); library(rmarkdown); library(devtools); library(roxygen2)
document()
build()
install()
check()
?check
document()
build()
install(build_vignettes = F)
check()
document()
build()
install(build_vignettes = F)
check()
document()
build()
install()
library(knitr); library(rmarkdown); library(devtools); library(roxygen2)
document()
document()
document()
document()
setwd("~/Dropbox/Safe/Research/GSM/final/genscore/R")
setwd("~/Dropbox/Safe/Research/GSM/final/genscore")
document()
document()
document()
document()
document()
library(knitr); library(rmarkdown); library(devtools); library(roxygen2)
document()
document()
document()
document()
build(vignettes = F)
install(build_vignettes = F)
check()
?requireNamespace
requireNamespace("pkg", quitely =  TRUE)
requireNamespace("pkg", quttely = TRUE)
requireNamespace("pkg", quietly = TRUE)
requireNamespace("a", quietly = TRUE)
requireNamespace("base", quietly = TRUE)
!requireNamespace("pkg", quietly = TRUE)
!requireNamespace("base", quietly = TRUE)
stop("Please install package \"Matrix\".")
!requireNamespace("Matrix", quietly=TRUE)
stop("Please install package \"Matrix\".")
tools::package_native_routine_registration_skeleton(".")
document()
build()
document()
build()
install()
check()
do.call(".C",
c(list("dist", n=as.integer(4),
p=25,
13,
list("errno"=as.integer(0))))
c(list("dist", n=as.integer(4),
p=25,
13,
list("errno"=as.integer(0))))
document()
build()
install()
check()
?.C
document()
document()
build()
install()
check()
document()
build()
tools::package_native_routine_registration_skeleton(".")
document()
e_routine_registration_skeleton(".")
#document();
build()
install()
check()
tools::package_native_routine_registration_skeleton
?tools::package_native_routine_registration_skeleton
document()
tools::package_native_routine_registration_skeleton(".")
document()
document()
build()
install()
check()
document()
build()
install()
check()
document()
build()
install()
check()
n <- 30
p <- 10
K <- diag(p)
eta <- numeric(p)
domain <- make_domain("R", p=p)
x <- gen(n, "gaussian", FALSE, eta, K, domain, 100)
x <- gen(n, "gaussian", FALSE, eta, K, domain, 100, seed=1)
x2 <- gen(n, "gaussian", FALSE, eta, K, domain, 100, seed=1)
x3 <- gen(n, "gaussian", FALSE, eta, K, domain, 100, seed=1)
domain <- make_domain("simplex", p=p)
x <- gen(n, "gaussian", FALSE, eta, K, domain, 100, seed=1)
x2 <- gen(n, "gaussian", FALSE, eta, K, domain, 100, seed=1)
x3 <- gen(n, "gaussian", FALSE, eta, K, domain, 100, seed=1)
x-x2
x-x3
x3 <- gen(n, "gaussian", FALSE, eta, K, domain, 100, seed=2)
x-x3
document()
build()
install()
check()
n <- 30
p <- 10
K <- diag(p)
eta <- numeric(p)
domain <- make_domain("R", p=p)
x <- gen(n, "gaussian", FALSE, eta, K, domain, 100)
get_g0_ada(domain, 0.3)(x)
x <- gen(n, "gaussian", FALSE, eta, K, domain, 100)
x
document()
build()
install()
check()
document()
document()
build(vignettes = F)
devtools::build_win()
?devtools::check_win_devel
document()
build()
install()
install()
check()
devtools::check_win_devel()
devtools::check_win_release()
document()
build()
install(build_vignettes = F)
n <- 30
p <- 10
K <- diag(p)
eta <- numeric(p)
domain <- make_domain("R", p=p)
x <- gen(n, "gaussian", FALSE, eta, K, domain, 100)
get_g0_ada(domain, 0.3)(x)
domain <- make_domain("uniform", p=p, lefts=c(-Inf,-3,3), rights=c(-5,1,Inf))
x <- gen(n, "gaussian", FALSE, eta, K, domain, 100)
get_g0_ada(domain, 0.6)(x)
domain <- make_domain("uniform", p=p, lefts=c(-Inf,-3,3), rights=c(-5,1,Inf))
x <- gen(n, "gaussian", FALSE, eta, K, domain, 100, seed=1)
get_g0_ada(domain, 0.6)(x)
domain <- make_domain("uniform", p=p, lefts=c(-Inf,-3,3), rights=c(-5,1,Inf))
x2 <- gen(n, "gaussian", FALSE, eta, K, domain, 100, seed=1)
get_g0_ada(domain, 0.6)(x)
sum(abs(x-x2))
domain <- make_domain("simplex", p=p)
x <- gen(n, "gaussian", FALSE, eta, K, domain, 100)
max(abs(get_g0_ada(domain, 0.4)(x)$g0 - get_g0_ada(domain, 0.4)(x[,-p])$g0))
max(abs(get_g0_ada(domain, 0.4)(x)$g0d - get_g0_ada(domain, 0.4)(x[,-p])$g0d))
domain <- make_domain("polynomial", p=p, ineqs=
list(list("expression"="sum(x^2)>1.3", "nonnegative"=FALSE, "abs"=FALSE)))
x <- gen(n, "gaussian", FALSE, eta, K, domain, 100)
get_g0_ada(domain, 0.5)(x)
check()
devtools::check_win_devel()
devtools::check_win_release()
devtools::check_win_devel()
devtools::check_win_release()
document()
build()
install()
check()
devtools::check_win_devel()
devtools::check_win_devel()
document()
build()
install()
check()
make_domain
document()
build()
install(); check()
devtools::check_win_devel()
devtools::check_win_release()
devtools::check_win_release()
document()
document(); build(); install(); check()
devtools::check_win_devel()
devtools::check_win_release()
mean(apply(matrix(sample(1:6, 12000, replace=TRUE), ncol=6),  1, function(xx){length(unique(xx))==6}))
mean(apply(matrix(sample(1:6, 120000, replace=TRUE), ncol=6),  1, function(xx){length(unique(xx))==6}))
mean(apply(matrix(sample(1:6, 1200000, replace=TRUE), ncol=6),  1, function(xx){length(unique(xx))==6}))
mean(apply(matrix(sample(1:6, 1200000, replace=TRUE), ncol=6),  1, function(xx){length(unique(xx))==6}))
mean(apply(matrix(sample(1:6, 12000000, replace=TRUE), ncol=6),  1, function(xx){length(unique(xx))==6}))
5*4*3*2*1/6^5
table(c(1,2,3,4,1,2))
sort(table(c(1,2,3,4,1,2)))
mean(apply(matrix(sample(1:6, 120000, replace=TRUE), ncol=6),  1, function(xx){length(unique(xx))==5 && all(sort(table(xx)) == c(1,1,1,1,2))}))
mean(apply(matrix(sample(1:6, 1200000, replace=TRUE), ncol=6),  1, function(xx){length(unique(xx))==5 && all(sort(table(xx)) == c(1,1,1,1,2))}))
0.232385/0.0154321
6^6
combn(c(1,2,3))
combn(c(1,2,3), 3)
expand.grid(1:6, 1:6)
expand.grid(1:6, 1:6, 1:6)
M <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6, 1:6)
mean(apply(M,  1, function(xx){length(unique(xx))==5 && all(sort(table(xx)) == c(1,1,1,1,2))}))
sum(apply(M,  1, function(xx){length(unique(xx))==5 && all(sort(table(xx)) == c(1,1,1,1,2))}))
nrow(M)
apply(M,  1, function(xx){length(unique(xx))==5 && all(sort(table(xx)) == c(1,1,1,1,2))})[1:15,]
apply(M[1:15,],  1, function(xx){length(unique(xx))==5 && all(sort(table(xx)) == c(1,1,1,1,2))})
apply(M[1:100,],  1, function(xx){length(unique(xx))==5 && all(sort(table(xx)) == c(1,1,1,1,2))})
apply(M[1:1000,],  1, function(xx){length(unique(xx))==5 && all(sort(table(xx)) == c(1,1,1,1,2))})
which(apply(M[1:1000,],  1, function(xx){length(unique(xx))==5 && all(sort(table(xx)) == c(1,1,1,1,2))}))
which(apply(M[1:1000,],  1, function(xx){length(unique(xx))==5 && all(sort(table(xx)) == c(1,1,1,1,2))}))
M[311,]
length(which(apply(M[1:1000,],  1, function(xx){length(unique(xx))==5 && all(sort(table(xx)) == c(1,1,1,1,2))})))
sum(apply(M,  1, function(xx){length(unique(xx))==5 && all(sort(table(xx)) == c(1,1,1,1,2))}))
6*5*4*3*2
10800/720
720/2*30
6*5*4*3*6*5
6*5*4*3*2*5
sum(apply(M,  1, function(xx){length(unique(xx))==6 && all(sort(table(xx)) == c(1,1,1,1,1,1))}))
6*5*4*3*2/2
6*5*4*3*2/2*6*5
sum(apply(M,  1, function(xx){length(unique(xx))==4 && all(sort(table(xx)) == c(1,1,2,2))}))
6*5*4*3*2/2/2
180^2
sum(apply(M,  1, function(xx){length(unique(xx))==3 && all(sort(table(xx)) == c(2,2,2))}))
6*5*4*3*2/2/2/2*6*5*4
6*5*4*3*6*5*4*3*2/2/2/2
6*5*4*3*6*5*4*3*2/2/2/2/2
6*5*4*6*5*4*3*2/2/2/2/6
pattern <- c(1,1,1,1,2)
sum(apply(M,  1, function(xx){length(unique(xx))==length(pattern) && all(sort(table(xx)) == pattern)}))
apply(M[1:10],  1, function(xx){sort(table(xx))})
apply(M[1:10,],  1, function(xx){sort(table(xx))})
table(apply(M[1:10,],  1, function(xx){sort(table(xx))}))
apply(M[1:10,],  1, function(xx){sort(table(xx))})
pattern <- c(1,1,1,3); sum(apply(M,  1, function(xx){length(unique(xx))==length(pattern) && all(sort(table(xx)) == pattern)}))
6*5*4*3*6*5*4*3*2*1/3/2/3/2
pattern <- c(1,1,2,2); sum(apply(M,  1, function(xx){length(unique(xx))==length(pattern) && all(sort(table(xx)) == pattern)}))
pattern <- c(1,1,4); sum(apply(M,  1, function(xx){length(unique(xx))==length(pattern) && all(sort(table(xx)) == pattern)}))
6*5*4*720/2/120
6*5*4*720/2/4/3/2/
1
pattern <- c(2,2,2); sum(apply(M,  1, function(xx){length(unique(xx))==length(pattern) && all(sort(table(xx)) == pattern)}))
pattern <- c(1,2,3); sum(apply(M,  1, function(xx){length(unique(xx))==length(pattern) && all(sort(table(xx)) == pattern)}))
6*5*4*720/6/2
pattern <- c(1,5); sum(apply(M,  1, function(xx){length(unique(xx))==length(pattern) && all(sort(table(xx)) == pattern)}))
6*5*6
pattern <- c(3,3); sum(apply(M,  1, function(xx){length(unique(xx))==length(pattern) && all(sort(table(xx)) == pattern)}))
6*5*720/6/6/2
pattern <- c(2,4); sum(apply(M,  1, function(xx){length(unique(xx))==length(pattern) && all(sort(table(xx)) == pattern)}))
6*5*720/2/30
6*5*720/2/4/3/2/1
pattern <- c(6); sum(apply(M,  1, function(xx){length(unique(xx))==length(pattern) && all(sort(table(xx)) == pattern)}))
720+10800+7200+16200+1800*2+7200+180+300+450;6
720+10800+7200+16200+1800*2+7200+180+300+450+6
6^6
M <- expand.grid(c(1,2,3,4,5,5), c(1,2,3,4,5,5), c(1,2,3,4,5,5), c(1,2,3,4,5,5), c(1,2,3,4,5,5), c(1,2,3,4,5,5))
pattern <- c(1,1,1,1,2); sum(apply(M,  1, function(xx){length(unique(xx))==length(pattern) && all(sort(table(xx)) == pattern)}))
5*4*3*2*6*5/2
6*4*3*2*6*5*4*3*2/2
6*4*3*2*6*5*4*3*2/2/4/3/2
sum(apply(M,  1, function(xx){all(sort(xx)==c(1,2,3,4,5,5))}))
pattern <- c(1,1,1,1,2); sum(apply(M,  1, function(xx){length(unique(xx))==length(pattern) && all(sort(table(xx)) == pattern)}))
ll <- list(1:6, c(1,1,1,1,2), c(1,1,1,3), c(1,1,2,2), c(1,1,4), c(1,2,3), c(2,2,2), c(1,5), c(2,4), c(3,3), c(6))
patterns <- list(1:6, c(1,1,1,1,2), c(1,1,1,3), c(1,1,2,2), c(1,1,4), c(1,2,3), c(2,2,2), c(1,5), c(2,4), c(3,3), c(6))
patterns
pattern_lengths <- apply(patterns, length)
n
Y
R
version
##########################
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
install.packages("devtools")
library(updateR)
install_github('andreacirilloac/updateR')
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR
updateR()
install.packages(as.vector(needed_packages))
install.packages(as.vector(needed_packages))
install.packages(as.vector(needed_packages))
